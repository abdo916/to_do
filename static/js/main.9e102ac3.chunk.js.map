{"version":3,"sources":["component/todoItem/todo.js","component/addItem/add.js","App.js","serviceWorker.js","index.js"],"names":["TodoList","props","items","deleteItem","itemList","length","map","item","key","id","className","name","age","type","onClick","AddList","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","addItem","currentTarget","reset","onSubmit","this","placeholder","onChange","required","Component","App","filter","Math","random","push","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oRAgDeA,G,MA5CE,SAACC,GAAW,IAClBC,EAAoBD,EAApBC,MAAOC,EAAaF,EAAbE,WAERC,EADIF,EAAMG,OAEXH,EAAMI,KAAI,SAAAC,GACP,OACI,yBAAKC,IAAKD,EAAKE,IACX,0BAAMC,UAAU,QAAQH,EAAKI,MAC7B,0BAAMD,UAAU,OAAOH,EAAKK,KAC5B,0BAAMF,UAAU,SACZ,2BAAOG,KAAK,aACZ,2BAAOA,KAAK,aACZ,2BAAOA,KAAK,cAEhB,0BAAMH,UAAU,cAAcI,QAAU,WAAOX,EAAWI,EAAKE,MAA/D,cAKZ,uBAAGC,UAAU,QAAb,4BAIJ,OACI,yBAAKA,UAAU,aACX,6BACI,0BAAMA,UAAU,cAAhB,QACA,0BAAMA,UAAU,aAAhB,OAIQ,0BAAMA,UAAU,cAAhB,QACA,0BAAMA,UAAU,iBAAhB,WACA,0BAAMA,UAAU,iBAAhB,WAGR,0BAAMA,UAAU,gBAAhB,WAEHN,K,OCEEW,G,kNAtCXC,MAAQ,CACJL,KAAO,GACPC,IAAM,I,EAGVK,aAAc,SAACC,GACX,EAAKC,SAAL,eACKD,EAAEE,OAAOX,GAAMS,EAAEE,OAAOC,S,EAIjCC,aAAe,SAACJ,GACZA,EAAEK,iBACF,EAAKtB,MAAMuB,QAAQ,EAAKR,OACxBE,EAAEO,cAAcC,S,uDAWhB,OACI,6BACI,0BAAMC,SAAUC,KAAKN,cACjB,2BAAOT,KAAK,OAAOgB,YAAY,aAAapB,GAAG,OAAOqB,SAAUF,KAAKX,aAA0Cc,UAAQ,IACvH,2BAAOlB,KAAK,SAASgB,YAAY,YAAYpB,GAAG,MAAMqB,SAAUF,KAAKX,aAAyCc,UAAQ,IACtH,2BAAOlB,KAAK,SAASQ,MAAO,c,GAhC1BW,cC8CPC,E,4MA5CbjB,MAAQ,CACNd,MAAQ,CACN,CAACO,GAAG,EAAGE,KAAK,OAAQC,IAAK,IACzB,CAACH,GAAG,EAAGE,KAAK,OAAQC,IAAK,IACzB,CAACH,GAAG,EAAGE,KAAK,QAASC,IAAK,M,EAI9BT,WAAa,SAACM,GASZ,IAAIP,EAAQ,EAAKc,MAAMd,MAAMgC,QAAO,SAAA3B,GAClC,OAAOA,EAAKE,KAAMA,KAEpB,EAAKU,SAAS,CAACjB,MAAMA,K,EAGvBsB,QAAU,SAACjB,GACTA,EAAKE,GAAK0B,KAAKC,SACf,IAAIlC,EAAQ,EAAKc,MAAMd,MACvBA,EAAMmC,KAAK9B,GACX,EAAKY,SAAS,CAACjB,W,uDAOf,OACI,yBAAKQ,UAAU,iBACb,4CACA,kBAAC,EAAD,CAAUR,MAAO0B,KAAKZ,MAAMd,MAAOC,WAAYyB,KAAKzB,aACpD,kBAAC,EAAD,CAASqB,QAASI,KAAKJ,e,GAvCfQ,aCOEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9e102ac3.chunk.js","sourcesContent":["import React from 'react';\r\nimport './todo.css';\r\n\r\n\r\nconst TodoList = (props) => {\r\n    const {items, deleteItem} =props;\r\n    let lng = items.length;\r\n    const itemList = lng ? (\r\n         items.map(item => {\r\n            return (\r\n                <div key={item.id}>\r\n                    <span className=\"name\">{item.name}</span>\r\n                    <span className=\"age\">{item.age}</span>\r\n                    <span className='check'>\r\n                        <input type=\"checkbox\" />\r\n                        <input type=\"checkbox\" />\r\n                        <input type=\"checkbox\" />\r\n                    </span>\r\n                    <span className=\"action icon\" onClick= {() => {deleteItem(item.id)}}>&#10003;</span>\r\n                </div>\r\n            )\r\n        }) \r\n    ) : (\r\n        <p className=\"cond\">There is no item to show</p>\r\n    )\r\n\r\n    \r\n    return (\r\n        <div className=\"listItems\">\r\n            <div>\r\n                <span className=\"name title\">Name</span>\r\n                <span className=\"age title\">Age</span>\r\n                {/*<span className=\"tasks title\">\r\n                        <span className=\"task\">Tasks</span>*/}\r\n                    {/*<div className=\"objects\">*/}\r\n                        <span className=\"math title\">Math</span>\r\n                        <span className=\"english title\">English</span>\r\n                        <span className=\"science title\">Science</span>\r\n                    {/*</div>\r\n                </span>*/}\r\n                <span className=\"action title\">Action</span>\r\n            </div>\r\n            {itemList}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default TodoList;","import React, {Component} from 'react';\r\nimport './add.css';\r\n\r\n\r\nclass AddList extends Component {\r\n\r\n    state = {\r\n        name : '',\r\n        age : ''\r\n    };\r\n\r\n    handleChange= (e) => {\r\n        this.setState ({\r\n            [e.target.id] : e.target.value\r\n        })\r\n    };\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addItem(this.state)\r\n        e.currentTarget.reset();\r\n       /* this.setState ({\r\n            name: '',\r\n            age: ''\r\n        })*/\r\n    };\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <input type=\"text\" placeholder=\"Enter name\" id=\"name\" onChange={this.handleChange} /*value={this.state.name}*/ required />\r\n                    <input type=\"number\" placeholder=\"Enter age\" id=\"age\" onChange={this.handleChange} /*value={this.state.age}*/ required />\r\n                    <input type=\"submit\" value= \"Add\"/>\r\n\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddList;","import React, { Component } from 'react';\nimport TodoList from './component/todoItem/todo';\nimport AddList from './component/addItem/add'\n\n\nclass App extends Component {\n  state = {\n    items : [\n      {id:1, name:'bola', age: 22},\n      {id:2, name:'lola', age: 25},\n      {id:3, name:'foola', age: 28},\n    ]\n  }\n\n  deleteItem = (id) => {\n    \n    //method 1\n    /*let items = this.state.items;\n    let ind = items.findIndex(item => item.id === id);\n    items.splice(ind,1);\n    this.setState({items:items})*/\n\n    //method 2\n    let items = this.state.items.filter(item => {\n      return item.id !==id\n    })\n    this.setState({items:items})\n  } \n\n  addItem = (item) => {\n    item.id = Math.random();\n    let items = this.state.items;\n    items.push(item);\n    this.setState({items})\n  }\n\n\n\n\n  render() {\n    return (\n        <div className=\"App container\">\n          <h1>Todolist App</h1>\n          <TodoList items={this.state.items} deleteItem={this.deleteItem}/>\n          <AddList addItem={this.addItem} />\n        </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}